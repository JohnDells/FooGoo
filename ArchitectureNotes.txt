GitHub:  https://github.com/JohnDells/FooGoo

Controllers
	Purpose:	Provide an REST/HTTP interface to the FooManager.
	Goal:		Should be as lightweight as possible, with no logic whatsoever.

Managers
	Purpose:	To provide orchestration and business logic.
					These tend towards the facade pattern for simple CRUD operations.

Repositories:
	Purpose:	To provide an interface to data stores.
	Goal:		Should be able to be swapped out without impace to the application.
	Interface:  Should have nothing specific to any implementation.

Data Structure:
	Foo:		This is the root "thing".
	FooType:	This is a lookup parent to Foo and is intended to have a limited number of values.
	Bar:		This is a child of "Foo", with a one to many relationship to it's parent.
					Usually nothing is ever done to these records outside the context of it's parent foo.
	Baz:		This is a relationship between two Foos "nodes" - representing the "edge" in a graph implementation.	

Philosophy and principals:
	1.  You should be able to swap out repositories to point at different data sources.
		a.  This should be as easy as a switch in the Startup / DI layer.
	2.  Entity objects are specific to the type of repository.  i.e.  Mongo uses an objectId that is specific to Mongo.
	3.  Managers should have no knowledge of entity objects, but rather use DTO (data transfer objects) to interface with repos.
	4.  Guids are used universally as unique keys.
	5.  Predictable failure should always happen gracefully.
		a.  500 response at the controller level is reserved for unexpected stuff.
		b.  Duplicate checks are considered predictable.
	6.  Creates always add an item as "active".
	7.  Deletes always check to see if an item is "active" - saves not necessary if they aren't.
	8.  There is no "update fooId" for bar.  In contexts such as this, we don't allow moving bars from one foo to another.
	9.  There is no "getBarById" method.  In contexts like this, we should have no reason to get a single bar.



	